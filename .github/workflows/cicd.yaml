name: Build and Deploy

on:
  push:
    branches: ['main']
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read

jobs:
  build:
    name: Build and Test
    timeout-minutes: 5
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test
      TURBO_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      TURBO_TEAM: ${{ secrets.VERCEL_ID }}
    steps:
      - name: Check out code
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
        with:
          fetch-depth: 2

      - uses: pnpm/action-setup@d882d12c64e032187b2edb46d3a0d003b7a43598 # v2.4.0

      - name: Setup Node.js environment
        uses: actions/setup-node@5e21ff4d9bc1a8cf6de233a3057d20ec6b3fb69d # v3
        with:
          node-version: 18
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build

      - name: Test
        run: pnpm test

  containerize:
    name: containerize
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ['request-headers']
    steps:
      - name: Check out code
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
        with:
          fetch-depth: 1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@885d1462b80bc1c1c7f0b00334ad271f09369c55 # v2

      - name: Login to DockerHub
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate Docker Meta
        uses: docker/metadata-action@818d4b7b91585d195f67373fd9cb0332e31a7175 # v4
        id: meta
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.app }}
          tags: |
            type=sha,enable=true,priority=100,prefix=,suffix=,format=long
          flavor: |
            latest=true

      - name: Build and push
        uses: docker/build-push-action@2eb1c1961a95fc15694676618e422e8ba1d63825 # v4
        with:
          build-args: |
            APP=${{ matrix.app }}
            TURBO_TEAM=${{ secrets.VERCEL_ID }}
            TURBO_TOKEN=${{ secrets.VERCEL_TOKEN }}
          push: ${{ github.event_name != 'pull_request' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          sbom: true
          provenance: true

  deploy:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs: containerize
    runs-on: home-cluster
    container:
      image: jonpulsifer/bashcurljq
      env:
        ARGOCD_URL: argo-argocd-server.argo
    strategy:
      matrix:
        app: ['request-headers', 'request-headers-tf']
    env:
      ARGOCD_URL: argo-argocd-server.argo
    steps:
      - name: Download ArgoCD CLI
        run: |
          curl -sSL -o /tmp/argocd http://${{ env.ARGOCD_URL }}/download/argocd-linux-amd64
          chmod +x /tmp/argocd
          sudo mv /tmp/argocd /usr/local/bin/argocd
      - name: Login to ArgoCD
        run: |
          echo y | argocd login --insecure --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --grpc-web ${{ env.ARGOCD_URL }}
      - name: Sync app to current commit
        run: |
          argocd app patch ${{ matrix.app }} --patch '[{ "op": "replace", "path": "/spec/sources/1/targetRevision", "value": "${{ github.sha }}" }]';
          argocd app set ${{ matrix.app }} -p image.tag=${{ github.sha }} --sync-policy automated
      - name: Wait for app to finish syncing
        run: |
          argocd app wait ${{ matrix.app }} --timeout 600
