name: Build and Deploy

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read

jobs:
  build:
    name: Build and Test
    timeout-minutes: 10
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.VERCEL_ID }}
    services:
      postgres:
        image: postgres:16@sha256:0e564daae78c2eea56ba57c64711bb9c408a512ce73cf81f9c78623354dd6976
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Check out code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
        with:
          fetch-depth: 2

      - uses: pnpm/action-setup@a3252b78c470c02df07e9d59298aecedc3ccdd6d # v3.0.0

      - name: Setup Node.js environment
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4
        with:
          node-version: 20
          cache: pnpm

      - name: Cache turbo build setup
        uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2 # v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Prepare db & env files
        env:
          PGPASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_MULTIPLE_DATABASES: authme,wishlist
        run: |
          ./.github/scripts/create-multiple-postgresql-databases.sh
          find . -type f -name '.env.development' -execdir cp -v {} .env \;

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build

      - name: Test
        run: pnpm test

  containerize:
    name: containerize
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - app: request-headers
            stack: nextjs
          - app: authme
            stack: nextjs
          - app: nested
            stack: nestjs
          - app: rosie
            stack: generic
    services:
      postgres:
        image: postgres:16@sha256:0e564daae78c2eea56ba57c64711bb9c408a512ce73cf81f9c78623354dd6976
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --name postgres
        ports:
          - 5432:5432
    steps:
      - name: Check out code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
        with:
          fetch-depth: 2

      - name: Prepare db & env files
        env:
          PGPASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_MULTIPLE_DATABASES: authme,wishlist
        run: |
          ./.github/scripts/create-multiple-postgresql-databases.sh
          find . -type f -name '.env.development' -execdir cp -v {} .env \;

      - name: Set up QEMU
        uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3

      - name: Login to DockerHub
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate Docker Meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5
        id: meta
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.app }}
          tags: |
            type=sha,enable=true,priority=100,prefix=,suffix=,format=long
          flavor: |
            latest=true

      - name: Build and push
        uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56 # v5
        with:
          build-args: |
            APP=${{ matrix.app }}
            TURBO_TEAM=${{ secrets.VERCEL_ID }}
            TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}
          push: ${{ github.event_name != 'pull_request' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: .
          file: ${{ matrix.stack == 'nextjs' && 'nextjs.Dockerfile' || 'Dockerfile' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          sbom: true
          provenance: true

  deploy:
    strategy:
      matrix:
        app: [request-headers, rosie, nested]
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs: [build, containerize]
    runs-on: ts
    environment:
      name: ${{ matrix.app }}
      url: https://${{matrix.app}}.lolwtf.ca
    env:
      ARGOCD_URL: argo-argocd-server.argo
    steps:
      - name: Download ArgoCD CLI
        run: |
          curl -sSL -o /tmp/argocd http://${{ env.ARGOCD_URL }}/download/argocd-linux-amd64
          chmod +x /tmp/argocd
          sudo mv /tmp/argocd /usr/local/bin/argocd
      - name: Login to ArgoCD
        run: |
          echo y | argocd login --insecure --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --grpc-web ${{ env.ARGOCD_URL }}
      - name: Update application revision and image to ${{ github.sha }}
        run: |
          argocd app set ${{ matrix.app }} --revision=${{ github.sha }} --kustomize-image=${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.app }}:${{ github.sha }}
      - name: Sync and wait for application to be healthy
        run: |
          argocd app sync ${{ matrix.app }} --prune
          argocd app wait ${{ matrix.app }} --timeout 600
