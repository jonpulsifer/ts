name: Build and Deploy with ArgoCD
on:
  workflow_dispatch:
    inputs:
      app:
        description: "App to deploy"
        required: true
        type: choice
        options:
          - request-headers
          - hub

jobs:
  containerize:
    name: containerize
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    services:
      postgres:
        image: postgres:17@sha256:3962158596daaef3682838cc8eb0e719ad1ce520f88e34596ce8d5de1b6330a1
        env:
          POSTGRES_PASSWORD: postgres
        # options: >-
        #   --health-cmd pg_isready
        #   --health-interval 10s
        #   --health-timeout 5s
        #   --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:alpine@sha256:1d7b7ada9554818f4808b71c58073592962586038ee6378ef4553eeb7b30f3ae
        # options: >-
        #   --health-cmd "redis-cli ping"
        #   --health-interval 10s
        #   --health-timeout 5s
        #   --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: Check out code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 2

      - name: Prepare db & env files
        if: ${{ inputs.app == 'wishlist' }}
        env:
          PGPASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_MULTIPLE_DATABASES: wishlist
        run: |
          ./.github/scripts/create-multiple-postgresql-databases.sh
          find . -type f -name '.env.example' -execdir cp -v {} .env \;

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3
        with:
          driver-opts: |
            network=host

      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Docker Meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5
        id: meta
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ inputs.app }}
          tags: |
            type=sha,enable=true,priority=100,prefix=,suffix=,format=long
          flavor: |
            latest=true

      - name: Get Dockerfile path
        id: dockerfile
        run: |
          if [[ "${{ inputs.app }}" == "hub" ]]; then
            echo "path=k8s/docker/remix.Dockerfile" >> $GITHUB_OUTPUT
          else
            echo "path=k8s/docker/nextjs.Dockerfile" >> $GITHUB_OUTPUT
          fi

      - name: Build and push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
        with:
          build-args: |
            APP=${{ inputs.app }}
          secrets: |
            TURBO_TEAM=${{ secrets.VERCEL_ID }}
            TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}
            DATABASE_URL=postgresql://postgres:postgres@localhost:5432/${{ inputs.app }}
            REDIS_URL=redis://localhost:6379
          push: ${{ github.event_name != 'pull_request' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: .
          file: ${{ steps.dockerfile.outputs.path }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          sbom: true
          provenance: true

  deploy:
    needs: [containerize]
    runs-on: arc-ts
    environment:
      name: ${{ inputs.app }}
      url: https://${{inputs.app}}.lolwtf.ca
    env:
      ARGOCD_URL: argo-argocd-server.argo
    steps:
      - name: Download ArgoCD CLI
        run: |
          curl -sSL -o /tmp/argocd http://${{ env.ARGOCD_URL }}/download/argocd-linux-amd64
          chmod +x /tmp/argocd
          sudo mv /tmp/argocd /usr/local/bin/argocd
      - name: Login to ArgoCD
        run: |
          echo y | argocd login --insecure --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --grpc-web ${{ env.ARGOCD_URL }}
      - name: Update application revision and image to ${{ github.sha }}
        run: |
          argocd app set ${{ inputs.app }} --revision=${{ github.sha }} --kustomize-image=ghcr.io/jonpulsifer/does-not-exist=ghcr.io/${{ github.repository_owner }}/${{ inputs.app }}:${{ github.sha }}
      - name: Sync and wait for application to be healthy
        run: |
          argocd app sync ${{ inputs.app }} --prune
          # argocd app wait ${{ inputs.app }} --timeout 600
